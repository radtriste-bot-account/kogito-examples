import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

deployProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }

    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    
    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/nightly_release.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs/nightly_release.groovy file
        REPO_NAME = 'kogito-examples'
        
        MAVEN_OPTS = '-Xms1024m -Xmx4g'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        // Maven configuration
        MAVEN_DEPLOY_LOCAL_DIR="${WORKSPACE}/maven_deploy_dir"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()
                    
                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                        assert getOptaPlannerVersion() != ''
                    }

                    checkoutRepo(getRepoName())
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getGitBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                        setDeployPropertyIfNeeded('optaplanner.version', getOptaPlannerVersion())

                    }
                }
            }
        }
        
        stage('Prepare for PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                prepareForPR(getRepoName())
            }
        }
        stage('Update project version'){
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                script {
                    maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(getRepoName()), getProjectVersion(), true)
                    // Update Optaplanner version
                    maven.mvnSetVersionProperty(getMavenCommand(getRepoName()), 'version.org.optaplanner', getOptaPlannerVersion())
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                script {
                    getMavenCommand(getRepoName()).skipTests(params.SKIP_TESTS).run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                }
            }
        }
        stage('Check kogito-examples with persistence') {
            steps {
                script {
                    sh "cp -r ${getRepoName()} ${getRepoName()}-persistence"
                    getMavenCommand("${getRepoName()}-persistence")
                        .skipTests(params.SKIP_TESTS)
                        .withProfiles(['persistence'])
                        .run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                }
            }
        }
        stage('Check kogito-examples with events') {
            steps {
                script {
                    sh "cp -r ${getRepoName()} ${getRepoName()}-events"
                    getMavenCommand("${getRepoName()}-events")
                        .skipTests(params.SKIP_TESTS)
                        .withProfiles(['events'])
                        .run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                script {
                    if (env.MAVEN_DEPLOY_REPOSITORY && env.MAVEN_REPO_CREDS_ID) {
                        // Deploy to specific repository with credentials
                        runMavenDeployLocally(getMavenCommand(getRepoName()))
                        maven.uploadLocalArtifacts(env.MAVEN_REPO_CREDS_ID, getLocalDeploymentFolder(), getMavenRepoZipUrl())
                    } else if(!isRelease() || env.MAVEN_DEPLOY_REPOSITORY){
                        // Normal deploy
                        runMavenDeploy(getMavenCommand(getRepoName()))
                    } else {
                         // Deploy locally and then to staging
                        runMavenDeployLocally(getMavenCommand(getRepoName()))
                        runMavenStage(getMavenCommand(getRepoName()))
                    }
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                commitAndCreatePR(getRepoName())
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.uri", "https://github.com/${getBotAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.ref", getBotBranch())
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.uri", "https://github.com/${getGitAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.ref", getGitBranch())
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
                writeFile(text: propertiesStr, file: 'deployment.properties')
                archiveArtifacts(artifacts: 'deployment.properties')
            }
            cleanWs()
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void checkoutRepo(String repo, String dirName=repo) {
    dir(dirName) {
        deleteDir()
        checkout(githubscm.resolveRepository(repo, getGitAuthor(), getGitBranch(), false))
    }
}

void prepareForPR(String repo) {
    dir(repo) {
        githubscm.forkRepo(getBotAuthorCredsID())
        githubscm.createBranch(getBotBranch())
    }
}

void addNotIgnoredPoms() {
    // based on https://stackoverflow.com/a/59888964/8811872
    sh '''
    find . -type f -name 'pom.xml' > found_poms.txt
    poms_to_add=""
    while IFS= read -r pom; do
        if ! git check-ignore -q "\$pom"; then
            poms_to_add="\$poms_to_add \$pom"
        fi
    done < found_poms.txt
    rm found_poms.txt
    git add \$poms_to_add
    git status
    '''
}

void commitAndCreatePR(String repo) {
    def commitMsg = "[${getGitBranch()}] Update project version to ${getProjectVersion()} for release"
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it will be merged automatically after testing."
    // Not using githubscm.commitChanges() because globbing won't work.
    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738
    dir(repo) {
        addNotIgnoredPoms()
        sh "git commit -m '${commitMsg}'"
        githubscm.pushObject('origin', getBotBranch(), getBotAuthorCredsID())
        deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, prBody, getGitBranch(), getBotAuthorCredsID())
    }
}

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

String getRepoName(){
    return env.REPO_NAME
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return "${GIT_AUTHOR}"
}

String getGitBranch(){
    return params.BUILD_BRANCH_NAME
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

String getOptaPlannerVersion(){
    return params.OPTAPLANNER_VERSION
}

String getBotBranch(){
    return "${getProjectVersion()}-${env.BOT_BRANCH_HASH}"
}

String getBotAuthor(){
    return env.GIT_AUTHOR_BOT
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

void setDeployPropertyIfNeeded(String key, def value){
    if (value != null && value != ''){
        deployProperties[key] = value
    }
}

MavenCommand getMavenCommand(String directory){
    MavenCommand mvnCmd = new MavenCommand(this, ['-fae'])
                                .withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
                                .inDirectory(directory)
                                .withProperty('full')
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

void runMavenDeploy(MavenCommand mvnCmd){
    mvnCmd = mvnCmd.clone()

    if(env.MAVEN_DEPLOY_REPOSITORY){
        mvnCmd.withDeployRepository(env.MAVEN_DEPLOY_REPOSITORY)
    }

    mvnCmd.skipTests(true).run('clean deploy')
}

void runMavenDeployLocally(MavenCommand mvnCmd) {
    mvnCmd.clone()
        .skipTests(true)
        .withLocalDeployFolder(getLocalDeploymentFolder())
        .run('clean deploy')
}

void runMavenStage(MavenCommand mvnCmd) {
    MavenStagingHelper stagingHelper = getStagingHelper(mvnCmd)
    deployProperties.putAll(stagingHelper.stageLocalArtifacts(env.NEXUS_STAGING_PROFILE_ID, getLocalDeploymentFolder()))
    stagingHelper.promoteStagingRepository(env.NEXUS_BUILD_PROMOTION_PROFILE_ID)
}

MavenStagingHelper getStagingHelper(MavenCommand mvnCmd) {
    return new MavenStagingHelper(this, mvnCmd)
                .withNexusReleaseUrl(env.NEXUS_RELEASE_URL)
                .withNexusReleaseRepositoryId(env.NEXUS_RELEASE_REPOSITORY_ID)
}

String getLocalDeploymentFolder(){
    return "${env.MAVEN_DEPLOY_LOCAL_DIR}/${getRepoName()}"
} 

String getMavenRepoZipUrl() {
     return "${env.MAVEN_DEPLOY_REPOSITORY.replaceAll('/content/', '/service/local/').replaceFirst('/*$', '')}/content-compressed"
}
